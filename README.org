#+Title: Postfix and SELinux
#+Author: Carsten Strotmann
#+Date: <2025-02-03 Mon>

* SELinux Overview
 * This document describes how to operate Postfix on RedHat compatible
   systems (RHEL, Fedora, CentOS, Rocky-Linux, Alma-Linux etc) with
   SELinux enabled.
** SELinux
 * SELinux (Security-Enhanced Linux) is an extension of the Linux
   kernel. It implements access controls to resources in the sense of
   Mandatory Access Control. SELinux was developed by the NSA for its
   own needs and is maintained by the Linux distributor Red Hat.
 * SELinux is open source software and consists of a kernel module,
   auxiliary programs and numerous extensions for system programs.
** Advantages of SELinux
 * SELinux allows a fine-grained policy to be defined for processes
 * Processes are not able to access files or manipulate other
   processes outside of SELinux rules
 * The SELinux system can prevent the escalation of privileges through
   security vulnerabilities in software
** SELinux Policies
 * The core component of SELinux are the policies, which describe in
   great detail what accesses (file system, syscalls, network) a
   process or user is allowed.
** SELinux Enforcement Modes
 * SELinux can be operated in three different modes
   - *Enforcing*: Policies are loaded and actively enforced
   - *Permissive*: Policies are loaded but not enforced. Policy
     violations are logged in the audit log
   - *Disabled*: Policies are not loaded, SELinux is not active.
** SELinux Configuration
 * The SELinux enforcement-modes and policy-modes-Modi are configured
   in the file =/etc/selinux/config=
   #+BEGIN_EXAMPLE
   SELINUX=enforcing
   SELINUXTYPE=targeted
   #+END_EXAMPLE
** SELinux Status
  * The command =sestatus= will print the current state of the SELinux
    system
  #+BEGIN_EXAMPLE
  # sestatus
  SELinux status:                 enabled
  SELinuxfs mount:                /sys/fs/selinux
  SELinux root directory:         /etc/selinux
  Loaded policy name:             targeted
  Current mode:                   permissive
  Mode from config file:          enforcing
  Policy MLS status:              enabled
  Policy deny_unknown status:     allowed
  Memory protection checking:     actual (secure)
  Max kernel policy version:      33
  #+END_EXAMPLE
** TODO SELinux operation modes
 * disabled / permissive / enforcing
 * how to read the current state of SELinux
 * How to switch


** DAC and MAC
 * Classic Unix/Linux systems implement Discretionary Access Control
   (DAC)
   - access rights are determined by file attributes and can be freely
     chosen by the user
 * SELinux implements Mandatory Access Control (MAC), where access
   rights are defined *in addition* to DAC in a system-wide security
   policy.
 * A MAC can usually *not* be changed by the user or processes
** SELinux policy
 * The SELinux policy describes in great detail the access rights of
   users and processes to files and system functions (system calls)
 * In source code, the SELinux policy is modular - The source code is
   compiled into a monolithic binary code when the policy is loaded
   into the Linux kernel
** SELinux Label
 * SELinux policy rules are assigned to /objects/ (processes, files
   and user) by SELinux label
 * Each file in the filesystem, each user and each process does have a
   SELinux label
 * The label selects the rules from the SELinux ruleset
** Label on files
 * Example output of =ls -lZ /etc/postfix/main.cf=

 [[./images/SELinux-file-label_en.png]]

** Adjust SELinux file label
 * SELinux file-label are stored in extended attributes inside the file-system
   - SELinux requires a filesystem with extended attribute support
 * SELinux file-label can be changed with =chcon= (Change
   Context):

   TODO - change to be Postfix specific
   #+BEGIN_EXAMPLE
   # chcon --type httpd_sys_content_t /var/www/html/index.html
   #+END_EXAMPLE

** Adjust SELinux file label
 * Alternatively the correct file label can be determined from the
   SELinux policy and assigned to the file
   #+BEGIN_EXAMPLE
   # restorecon -v /var/www/html/index.html
   #+END_EXAMPLE
** Adjust SELinux file label
 * If a SELinux system was operated with SELinux switched off, the
   SELinux file system labels may no longer be correct
   - Files created with SELinux switched off do not receive a label
   - The labels must be set correctly before activating SELinux
 * If the file =/.autorelabel= exists in the root directory =/= then
   all files will be given new SELinux labels and then the system will
   be rebooted
   #+BEGIN_EXAMPLE
   # touch /.autorelabel && reboot
   #+END_EXAMPLE
 * The autorelabel process starts the script =/usr/sbin/fixfiles=
 * This script can also be used to find missing or wrong SELinux
   labels on files.
   #+begin_example
   # fixfiles -v check /etc
   Would relabel /etc/ssh/keys/ssh_host_ecdsa_key from system_u:object_r:sshd_key_t:s0 to system_u:object_r:etc_t:s0
   Would relabel /etc/ssh/keys/ssh_host_ecdsa_key.pub from system_u:object_r:sshd_key_t:s0 to system_u:object_r:etc_t:s0
   Would relabel /etc/ssh/keys/ssh_host_ed25519_key from system_u:object_r:sshd_key_t:s0 to system_u:object_r:etc_t:s0
   Would relabel /etc/ssh/keys/ssh_host_ed25519_key.pub from system_u:object_r:sshd_key_t:s0 to system_u:object_r:etc_t:s0
   Would relabel /etc/ssh/keys/ssh_host_rsa_key from system_u:object_r:sshd_key_t:s0 to system_u:object_r:etc_t:s0
   Would relabel /etc/ssh/keys/ssh_host_rsa_key.pub from system_u:object_r:sshd_key_t:s0 to system_u:object_r:etc_t:s0
   Would relabel /etc/hosts~ from unconfined_u:object_r:etc_t:s0 to unconfined_u:object_r:net_conf_t:s0
   #+end_example

 * The script =fixfiles= can read the SELinux label information from
   RPM-Packet-Metadata and can fix the SELinux label of files that belong
   to an RPM-Packet.
   #+begin_example
   fixfiles -v -R nginx,httpd restore
   #+end_example
** Label on processes
 * Example output from the command =ps -efZ=

 [[./images/SELinux-process-label_en.png]]

 * Running processes are labeled based on the loaded SELinux policy

** SELinux label on files and processes
 * How SELinux enforces policy rules based on label
** SELinux policies
 * SELinux modules
 * SELinux boolean switches
* Audit Subsystem
** The Linux Audit Subsystem
 * The Linux audit subsystem allows the operator of a Linux system to
   specify fine-grained audit logging for system events.
   - Events from Linux Security Modules (LSM) such as AppArmor or
     SELinux
   - Events from security-related applications (SSH, login program)
   - Events which are triggered by any application and are stored in
     the audit subsystem policy configuration (e.g. system calls, file
     accesses, network activities).

** SELinux and the Audit Subsystem
 * The operation of SELinux without the audit subsystem is technically
   possible, but often does not make sense.
   - SELinux prevents accesses, but these are not logged, so that the
     operator of the system has no overview of the of the
     effectiveness of the SELinux-System
   - A well-configured audit subsystem is the basis for the use of
     SELinux

** Audit Subsystem Overview

 [[./images/Audit-overview_en.png]]

* Linux Audit Subsystem Configuration
** Configuration of the audit daemon
 * The configuration file of the audit daemon under
   =/etc/audit/auditd.conf= should therefore be updated using
   resonable values before putting the audit subsystem (or SELinux)
   into operation
** Audit-Logfile
 * In the standard configuration, the log data is written to the file
   =/var/log/audit/audit.log=. For a central audit log server, it is
   useful if this file is on a separate file system
   #+BEGIN_EXAMPLE
   write_logs = yes  # set to "no" for
                     # only remote logging
   log_file = /var/log/audit/audit.log
   #+END_EXAMPLE
** Group rights and format of the audit log file
 * If the log information is to be read by users other than the
   superuser =root=, the group membership of the log file should be
   adjusted (e.g. to the group =wheel=).
   #+BEGIN_EXAMPLE
   log_group = root
   log_format = ENRICHED   # "enriched" or "raw"
   #+END_EXAMPLE
 * With the log format =enriched=, the log data is provided with
   metadata by the audit daemon, which simplifies the evaluation of
   the log data. simplify. With the =raw= setting, the log data is
   stored as sent by the Linux kernel
** Log-Host Metadata
 * The audit log daemon can add the host name of the source host to
   the log information
   - this is useful for remote audit logging
   - =name= is the host name / domain that is added to the log data
     when =name_format= is set to =user=.
   #+BEGIN_EXAMPLE
   name_format = NONE
   ##name = mydomain
   #+END_EXAMPLE

 * Possible values for =name_format=:
 | Value    | Description                                  |
 |----------+----------------------------------------------|
 | NONE     | No source-host metadata                      |
 | HOSTNAME | The hostname of the system (gethostname)     |
 | FQDN     | Full domain name from DNS reverse resolution |
 | NUMERIC  | IP(v4) Address of the host                   |
 | USER     | Value of the =name= parameter                |

** "Space Left" event
 * The =space_left= value specifies the limit of free space on the
   storage medium of the log file above which the audit daemon should
   issue a warning
   - In the default setting, the warning is written to the =syslog=
   - The value is in megabytes (MB) and is probably too low for modern
     systems (recommendation: 1000 MB). The value can also be given as
     a percentage (example: =25%=).
   #+BEGIN_EXAMPLE
   space_left = 75
   space_left_action = SYSLOG
   #+END_EXAMPLE
** "Admin Space Left" event
 * The =admin_space_left= value specifies the limit of free space on
   the storage medium of the log file at which the audit daemon should
   change its mode of operation. This value should be lower than
   =space_left=.
   - In the default setting, the audit daemon stops working
   - The value is in megabytes (MB) and is probably too low for modern
     systems (recommendation: 300 MB). The value can also be given in
     percent (example: =5%=)
   #+BEGIN_EXAMPLE
   admin_space_left = 50
   admin_space_left_action = SUSPEND
   #+END_EXAMPLE
** Storage-media error event
 * These values specify how the audit daemon should react to errors
   when writing the log file
   - In the default setting, the audit daemon stops working
   #+BEGIN_EXAMPLE
   disk_full_action = SUSPEND
   disk_error_action = SUSPEND
   #+END_EXAMPLE
** Event-actions for the audit deamon
 | Keyword | Description                                               |
 |---------+-----------------------------------------------------------|
 | ignore  | Ignore state, no event                                    |
 | syslog  | Log state via =syslog=                                    |
 | rotate  | Rotate log-file, remove extra log-files                   |
 | exec    | Execute a (shell-) script or program                      |
 | suspend | Stop writing log data to files                            |
 | single  | Switch system into /single user/ mode, deactivate network |
 | halt    | Shutdown system                                           |


** Audit-Daemon status
 * The audit daemon is usually started by systemd very early in the
   boot process
 * It is managed as any other systemd service

#+BEGIN_EXAMPLE
# systemctl status auditd
● auditd.service - Security Auditing Service
     Loaded: loaded (/usr/lib/systemd/system/auditd.service; enabled; vendor preset: enabled)
     Active: active (running) since Sun 2022-10-16 08:25:40 UTC; 12h ago
       Docs: man:auditd(8)
             https://github.com/linux-audit/audit-documentation
   Main PID: 645 (auditd)
      Tasks: 4 (limit: 2506)
     Memory: 8.1M
        CPU: 960ms
     CGroup: /system.slice/auditd.service
             ├─645 /sbin/auditd
             └─647 /usr/sbin/sedispatch

Oct 16 08:25:40 localhost augenrules[660]: enabled 1
Oct 16 08:25:40 localhost augenrules[660]: failure 1
Oct 16 08:25:40 localhost augenrules[660]: pid 645
Oct 16 08:25:40 localhost augenrules[660]: rate_limit 0
Oct 16 08:25:40 localhost augenrules[660]: backlog_limit 8192
Oct 16 08:25:40 localhost augenrules[660]: lost 0
Oct 16 08:25:40 localhost augenrules[660]: backlog 4
Oct 16 08:25:40 localhost augenrules[660]: backlog_wait_time 60000
Oct 16 08:25:40 localhost augenrules[660]: backlog_wait_time_actual 0
Oct 16 08:25:40 localhost systemd[1]: Started Security Auditing Service.
#+END_EXAMPLE

** Queries with "ausearch"
 * The tool =ausearch= can be used to query the local audit log
** Example query with "ausearch"
 * Display all audit entries for the topic /sudo/
   #+BEGIN_EXAMPLE
   ausearch -i -x sudo
   #+END_EXAMPLE
 * Report on failed login attempts
   #+BEGIN_EXAMPLE
   ausearch -m USER_AUTH,USER_ACCT --success no
   #+END_EXAMPLE
 * All audit messages for user with UID 1000
   #+BEGIN_EXAMPLE
   ausearch -ua 1000 -i
   #+END_EXAMPLE
 * All failed syscalls since yesterday
   #+BEGIN_EXAMPLE
   ausearch --start yesterday --end now -m SYSCALL -sv no -i
   #+END_EXAMPLE

** CSV Output Format
  * =ausearch= can save the query results into a CSV-file (comma
    separated value file)
  * CSV files can be loaded into office programs or imported into
    databases for further investigation

  #+BEGIN_EXAMPLE
  # ausearch --start today --format csv 2>/dev/null > audit-today.csv
  #+END_EXAMPLE

** TODO Audit Subsystem
 * How does the Linux Audit subsystem works
 * How to read SELinux audit logs
 * How to use =ausearch=
* SELinux Troubleshooting
** How to isolate SELinux issues
 * Is it really an SELinux issue?
 * Which part of SELinux creates the issue?
*** Finding the issue in the audit log
 * Find and interpret AVC policy violations
* Postfix and SELinux
** The Postfix SELinux Policy-Module
 * Controlling the Postfix policy module
 * Process label in the Postfix module, and how they are used
 * File system label in the Postfix module, and how they are used
 * Network ports
 * Postfix and other e-Mail related Boolean switches in the SELinux
   policy
** Changing label of files
* Changing the SELinux policy
** Changing file label path definitions
** Changing network port assignments
** Creating a new addition to the SELinux rule set
 * Creating a new SELinux policy modules
 * Using =audit2allow= to create a new policy module template
 * Reviewing a new policy module
 * Loading and testing a policy module
* Common SELinux issues and recipes
 * define a new daemon that Postfix master can run (e.g. postlogd)
 * Writing to non standard log files
 * Changing Postfix spool directories
 * Changing Postfix network ports
 * Virtual(8) to deliver mail as a given user to a specific subtree of
   the file system.
 * Access to various milter sockets
